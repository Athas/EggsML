#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Hvor mange bitcoin kan du få for dine lommepenge?

import subprocess
import eggsthon.shell as sh
import sys
import os
from functools import partial
import itertools
import random
import urllib2
import re
import xml.etree.ElementTree as ET
from lxml import html

def run_main(args):
    args = parseArgs(args)

    #list = urllib2.urlopen("https://coinbase.com/charts")
    #content = list.read()
    #priceInUSD = content.split('Buy Price: $')[1].split('<')[0]
    #priceInUSD = float(priceInUSD.replace(",","."))
    process = subprocess.run(['bitcoinpris', 'median'], stdout=subprocess.PIPE)
    priceInUSD = int(process.stdout.decode('utf-8').rstrip())
    dollarkurz = dollarkurs()
    priceInDKK = priceInUSD * (dollarkurz / 100.0)
    try:
        antalBitcoin = args[2] / priceInDKK
    except TypeError:
        fejl()
        return

    user = os.getenv("EGGS_USER")
    if user is None:
        user = "min ven"
    print "Tillykke %s, du kan købe %.4f bitcoin for dine penge."  % (user, antalBitcoin)
    print "Husk altid at %s, inden du gør den slags :-)" % (reminder())
    bitcoinAdvisor(priceInDKK)

def reminder():
    rms = ["spørge en voksen",
           "låne penge i banken" ,
           "slette din gamle bitcoin-tegnebog" ,
           "opsige dit job" ,
           "tale med en privatøkonom" ,
           "smile" ,
           "spørge om der er andre, som skal have noget med" ,
           "bitcoin er en boble",
           "vaske hænder",
           "fiske med snørre",
           "spise med kniv og gaffel",
           "køre forsigtigt",
           "huske tændbørsten",
           "hjælpe gamle damer over vejen",
           "stoppe for rødt",
           "børste tænder",
           "tale med din radio",
           "fodre ænder",
           "justere spejle",
           "undervognsbehandle",
           "tegne forsikring",
           "gøre det frække",
           "elske den næste",
           "finde bitcoin-kursen",
           "hylde kapitalismen"]
    rm = rms[random.randint(0, (len(rms) - 1))]
    return rm

def dollarkurs(valuta="USD"):
    page = urllib2.urlopen("http://valutakurser.dk").read()
    tree = html.fromstring(page)
    kurs = tree.xpath("//div[@id='" + valuta + "']/text()")[0]
    return float(kurs.replace(',','.'))

def parseArgs(args):
    try:
        assert (args[1] == "for" or args[3] == "kroner")
        args[2] = float(args[2])
    except (ValueError, IndexError):
        fejl()
        sys.exit(0)
    return args

def fejl():
    print "Brug 'bitcoin for <beløb> kroner'"

def fremtid():
    v = random.randint(1, 60)
    m = ""
    t = random.randint(0, 2)
    if t == 0:
        m = "sekund" if v == 1 else "sekunder"
    elif t == 1:
        m = "minut" if v == 1 else "minutter"
    elif t == 2:
        m = "time" if v == 1 else "timer"
    return "%i %s" % (v, m)

def bitcoinAdvisor(kronerPrBTC):
    try:
        oldPrice = float(sh.dbRead("bitcoin"))
    except:
        sh.dbWrite("bitcoin", stdin=str(0.00))
        oldPrice = 0.00
    finally:
        sh.dbWrite("bitcoin", stdin= str(kronerPrBTC))

        if oldPrice < kronerPrBTC:
            print "Kursen er steget siden sidst, SÆLG ALLE DINE BITCOINS!"
            print "Sidst var den jo %.4f kroner per bitcoin, men hvem ved hvad den er om %s?" % (kronerPrBTC, fremtid())
        else:
            print "Kursen er faldet siden sidst, INVESTÉR AL DIN EJENDOM I BITCOINS!"
            print "Den var tidligere %.4f kroner per bitcoin, men hvem ved hvad den er om %s" % (kronerPrBTC, fremtid())

if __name__ == '__main__':
    run_main(sys.argv)
