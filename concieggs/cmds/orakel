#!/usr/bin/env python3
#
# Spørg oraklet om sandsynlighedsfordelinger for et givent emne. Sammenligning med 24 timer gamle sandsynligheder vises også.

import requests
import random
import sys
import subprocess

make_danish = False

url = 'https://www.predictit.org/api/marketdata/all/'

resp = requests.get(url=url)
data = resp.json()

markets = data['markets']

if len(sys.argv) > 1:
    search_term = sys.argv[1]
    matches = list(x for x in markets if ( any(list(map(lambda y: search_term in y['name'], x['contracts'] )))))
    matches = matches + list(x for x in markets if search_term in x['name'])
    if not matches:
        matches = list(x for x in markets if ( any(list(map(lambda y: search_term.lower() in y['name'].lower(), x['contracts'] )))))
        matches = matches + list(x for x in markets if search_term.lower() in x['name'])
        if not matches:
            print(random.choice([
                "Ingen kender det, end ikke jeg selv. Kun Faderen ved det.",
                "Der må jeg være svar skyldig. Måske du allerede selv har en idé?",
                "Min krystalkugle er ikke stor nok til det emne. Jeg vil anbefale, at du spørger en ven.",
            ]))
            exit(0)
else:
    matches = markets

match = random.choice(matches)
# print(match)
contracts = match['contracts']
contract_name = match['name']
# print(contract_name)

contract_names_dk = list(map(lambda x: x['name'], contracts))
if (make_danish):
    translate_input = "\n".join(map(lambda x: x['name'], contracts))
    process = subprocess.run(['translate', 'en', 'da'], stdout=subprocess.PIPE, input=translate_input.encode('utf-8'))
    translate_output = process.stdout.decode('utf-8').rstrip()
    contract_names_dk = translate_output.split('\n')

if not contract_names_dk:
    contract_names_dk = [None] * len(contracts)

if len(list(contract_names_dk)) < len(contracts):
    contract_names_dk = contract_names_dk + [None] * (len(contracts) - len(contract_names_dk))

i = 0
output = contract_name + "\n" if len(contracts) > 1 else ""
for contract in contracts:
    # if contract is new or price is unchanged
    if (contract['lastClosePrice'] == None or contract['lastClosePrice'] == contract['lastTradePrice'] ):
        symbol = "\u2013" # ndash
        diff   = "+ 0.0"
    # If contract price is up
    elif (contract['lastClosePrice'] < contract['lastTradePrice']):
        symbol = "\x0309\u2191\x03" # green up arrow
        diff   = "\x0309+{:4.1f}\x03".format(100*(contract['lastTradePrice'] - contract['lastClosePrice']))
    # If contract price is down
    else:
        symbol = "\x0304\u2193\x03" # red down arrow
        diff   = "\x0304-{:4.1f}\x03".format(100*(contract['lastClosePrice'] - contract['lastTradePrice']))

    if not contract_names_dk[i]:
        contract_names_dk[i] = contract['name']

    output += contract_names_dk[i].rstrip() + " {:4.1f} pct. ".format(100 * contract['lastTradePrice']) + symbol +  " ({0})".format(diff) + "\n"
    i += 1
print(output.rstrip())
