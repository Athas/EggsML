#!/usr/bin/env python3

from functools import reduce
import hashlib
from lxml.html import fromstring
from lxml.etree import tostring
import random
import re
import subprocess
import sys
import urllib.request as ur

CHECK_LINK_ACCESS = True
MAKE_DANISH = False
ANIMAL_WORDS = ["dog", "cat", "animal", "horse", "elephant", "pig", "zoo", "sheep", "cow", "bull", "dolphin", "zebra", "giraffe", "fish", "mammal", "mouse", "mice", "rat", "ape", "monkey", "orangutan", "gorilla", "chimpanzee", "rodent", "pooch", "iguana", "iguanas", "crocodile", "crocodiles", "hog", "hogs", "cattle", "k-9", "k9", "canine", "feline", "puppy", "puppies", "alligator", "ant", "bear", "bee", "bird", "camel", "cheetah", "chicken", "deer", "duck", "eagle", "owl", "panda", "hamster", "wolf", "wolves", "tiger", "squirrel", "shark", "seal", "lion", "parrot", "llama", "turkey", "goose", "geese", "lizard", "ostrich", "ostriches", "dinosaur", "hippo", "hippopotamus", "whale", "raccoon"]
CASE_SENSITIVE_MATCH_POINTS = 30
CASE_INSENSITIVE_MATCH_POINTS = 20
PARTIAL_WORD_MATCH_POINTS = 2
URL_MATCH_POINTS = 1

welcome_message = len(sys.argv) > 2 and sys.argv[1] == "dyr" and sys.argv[2] == "Velkomstbesked"

# We load the page with curl instead of a Python lib since I got 403 when using a Python lib
process = subprocess.run(['curl', '--silent' ,'https://drudgereport.com'], stdout=subprocess.PIPE, input=None)
body = str(process.stdout.rstrip())
dom = fromstring(body)

# is this page ASCII or UTF8? Probably ASCII but it shouldn't matter since I think they only use ASCII characters anyway

# Top left
tl = re.search('<! TOP LEFT STARTS HERE>(.*?)<!', body)
tl_dom = fromstring(tl.group(1))
tl_links = tl_dom.cssselect('a')

# Main headline
m = re.search('<! MAIN HEADLINE>(.*?)</center>', body)
m_dom = fromstring(m.group(1))
m_links = m_dom.cssselect('a')
if (len(sys.argv) > 1 and (sys.argv[1] == "overskrift" or sys.argv[1] == "o")):
    for headline_link in m_links:
        text = headline_link.text

        # If text is none, this probably means that headline is red with DOM element <font> => Matt Drudge is excited!
        # We will follow his lead and also color our text red in IRC
        if text == None:
            uftext = headline_link.cssselect('font')[0].text_content().strip()
            if uftext == None:
                text = headline_link.text_content().strip()
            else:
                text = "\x0304" + uftext + "\x03"
        print('Overskriften på Drudge Report er: "{}" og kan læses på {}.'.format(text.replace("\\", ""), headline_link.get('href')))
        exit(0)

# Left column
l_dom = dom.cssselect('table > tr:nth-child(1) > td:nth-child(1)')
l = re.search('<td(.*?)<!', str(tostring(l_dom[0])))
l_dom = fromstring(l.group(1))
l_links = l_dom.cssselect('a')

# Centre column
c_dom = dom.cssselect('table > tr:nth-child(1) > td:nth-child(3)')
c = re.search('<td(.*?)<!', str(tostring(c_dom[0])))
c_dom = fromstring(c.group(1))
c_links = c_dom.cssselect('a')

# Right column
r_dom = dom.cssselect('table > tr:nth-child(1) > td:nth-child(5)')
r = re.search('<td(.*?)<!', str(tostring(r_dom[0])))
r_dom = fromstring(r.group(1))
r_links = r_dom.cssselect('a')

all_links = tl_links + m_links + l_links + c_links + r_links
formatted_links = []
for link in all_links:
    text = link.text_content().strip()
    if text == None:
        if len(link.cssselect('i')) > 0:
            text = link.cssselect('i')[0].text
    if text == None or text == "ANDROID..." or "DRUDGE APP IPHONE" in text or "Daily presidential tracking" in text:
        continue
    text = text.replace("\\", "")
    url = link.get('href')
    formatted_links.append((text, url, 0)) # [(link_text, url, weight)]

# Allow user to pick a theme that interests them
extra_output = ""
found_animal_story = False
cool_stories = []
search_terms = sys.argv[1:]
if (len(sys.argv) > 1):
    if len(sys.argv) == 2 and sys.argv[1] == "dyr":
        cool_stories = list(filter(lambda x: any(map(lambda y: re.search(r"\b{}s?\b".format(y), x[0], re.IGNORECASE), ANIMAL_WORDS)), formatted_links))
        random.shuffle(cool_stories)

        if len(cool_stories) > 0:
            found_animal_story = True
    else:
        index = 0
        for flink in formatted_links:
            weight = 0
            for search_term in search_terms:
                if re.search(r"\b{}\b".format(search_term), flink[0]):
                    weight += CASE_SENSITIVE_MATCH_POINTS
                    continue
                if re.search(r"\b{}\b".format(search_term), flink[0], re.IGNORECASE):
                    weight += CASE_INSENSITIVE_MATCH_POINTS
                    continue
                if re.search(r"{}".format(search_term), flink[0], re.IGNORECASE):
                    weight += PARTIAL_WORD_MATCH_POINTS
                    continue
                if search_term.lower() in flink[1].lower():
                    weight += URL_MATCH_POINTS

            # pick those stories that had a match on the search terms
            if weight > 0:
                cool_stories.append((formatted_links[index][0], formatted_links[index][1], weight))
            index += 1

        # Sort the matching stories with the best match base on search terms first
        cool_stories = sorted(cool_stories, key=lambda tup: tup[2], reverse = True)

    if (len(cool_stories) > 0):
        ss = " ".join(sys.argv[1:])
        if (len(cool_stories) > 1):
            extra_output = "Drudge Report har {} historier om {}. ".format(len(cool_stories), ss)
        else:
            extra_output = "Drudge Report har én historie om {}. ".format(ss)

    else:
        # Only print msg if function was called by a user and not as a welcome msg.
        if not welcome_message:
            print("Det kunne jeg desværre ikke finde en historie om.")
        exit(0)
else:
    cool_stories = formatted_links
    random.shuffle(cool_stories)

# Pick the story to present, attempt to find one that was not previously presented
present_index = 0
present = cool_stories[present_index]
if len(cool_stories) > 1:
    # If more than 1 relevant story was found, attempt to find a story that has not previously been presented
    # Delete from the cool_stories list those stories that have already been presented
    # If checkCooldown has a return code 0, the story has not previously been presented
    cache_key_prefix = "drudge_link_"
    run_params = ["checkCooldown", cache_key_prefix + hashlib.sha256(present[1].encode('utf-8')).hexdigest(), "604800"] # 604800 seconds = 7 days
    proc = subprocess.run(run_params)
    while proc.returncode != 0 and present_index < len(cool_stories):
        present_index += 1
        present = cool_stories[present_index % len(cool_stories)] # if all have been presented pick element 0
        run_params[1] = cache_key_prefix + hashlib.sha256(present[1].encode('utf-8')).hexdigest()
        proc = subprocess.run(run_params)

# Verify that concieggs can load page as many links are blocked in Europe due to GDPR
# Python is an inferior language without do/while loops so we use this ugly code instead
if CHECK_LINK_ACCESS:
    success_regex = re.compile(r".*200.*")
    process = subprocess.run(['status', present[1]], stdout=subprocess.PIPE, input=None)
    status = str(process.stdout.rstrip().decode('utf-8'))
    tried = 0
    while not success_regex.match(status):
        tried += 1
        if tried >= len(cool_stories):
            extra_output += "Desværre er siden vist blokeret for os europæere. "
            found_animal_story = False
            break
        else:
            tried_index = list(map(lambda x: x[1], cool_stories)).index(present[1])
            new_index = (tried_index + 1) % len(cool_stories)
            present = cool_stories[new_index]
            process = subprocess.run(['status', present[1]], stdout=subprocess.PIPE, input=None)
            status = str(process.stdout.rstrip().decode('utf-8'))

if welcome_message:
    # Print nice welcome message about animals if we found animal stories, otherwise exit
    # If the site was not accessible, nothing will be printed here as found_animal_story
    # is set to false
    if found_animal_story:
        print('Har du set den søde dyrehistorie "{}", som jeg fandt på {}?'.format(present[0], present[1]))
else:
    search_score_output = ""
    if present[2] > 0:
        max_score = len(search_terms) * CASE_SENSITIVE_MATCH_POINTS
        search_score_output = " (PageRank point: {} / {})".format(str(present[2]), str(max_score))
    print('{}Du kan finde historien "{}" på {}{}'.format(extra_output, present[0], present[1], search_score_output))
