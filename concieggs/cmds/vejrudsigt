#!/usr/bin/env python3

import random
import urllib.request as ur
import xml.etree.ElementTree as ET
from datetime import datetime
import eggsthon.shell as eggspi
import os

superman = r'''
          .=.,
         ;c =\
       __|  _/
     .'-'-._/-'-._
    /..   ____    \
   /' _  [<_->] )  \
  (  / \--\_>/-/'._ )
   \-;_/\__;__/ _/ _/
    '._}|==o==\{_\/
     /  /-._.--\  \_
    // /   /|   \ \ \
   / | |   | \;  |  \ \
  / /  | :/   \: \   \_\
 /  |  /.'|   /: |    \ \
 |  |  |--| . |--|     \_\
 / _/   \ | : | /___--._) \
|_(---'-| >-'-| |       '-'
       /_/     \_\
'''

kram = r'''
      ,;;;;;,
     ;;;;;;;;;
    ;;;;'''''';
    ;;C  /))))\\
  /'`;| (((((((|
 (  (_|( |))))))
,(   \  \(((((((|
( \   `._)))))))),_
|  \    \`\`""""' |)
)\  `\   ) \_____/_|
| \   `\    _.,-'  |
|  \    \.,-'   _./ |
|   \      _.-''  |  ;
 \___\__.-'       ;  )
  |----|   _.--,;'   ;
 ,'  , | (     __.,-'
 | ,' ,'  `""''   `.
 |    ;            )
 `,   (            )
  |   (           ,'
  |   |           (
  |   |           |
  |   |           |
  |   |___________|
  |   |      |    |
'''

kingkong = r'''
    /\  ____
    <> ( oo )
    <>_| ^^ |_
    <>   @    \
   /~~\ . . _ |
  /~~~~\    | |
 /~~~~~~\/ _| |
 |[][][]/ / [m]
 |[][][[m]
 |[][][]|
 |[][][]|
 |[][][]|
 |[|--|]|
 |[|  |]|
 ========
==========
|[[    ]]|
==========
'''

someguy = r'''
  \\\\\\,
 _/''  \\\
 \      D
  \_   /
  <\  />,_
 / \Y/ /` \
 || #  |  |
 || #  |  |
 || #  |  |
 ||=[]=|  |
 ||    |__|
//| |  /||\
  | |   |
  | |   |
  ( (   |
  | |   |
  [_[___]
 (_(____|
'''

hitler = r'''
░░░░░░░░░░░▄▄▄▄▄
░░░░░░░▄▄█████████▄▄
░░░░▄▀▀▀▀█▀▀▀▀▀▀█████▄
░░▄██████░░░░░░░░░░░▀██
░▐██████▌░░░░░░░░░░░░░▐▌
░███████▌░░░░░░░░░░░░░░█
▐████████░░░░░░░░░░░░░░░█
▐██████▌░░░░░▄▀▀▀▀▀▄░▀░▄▄▌
░█▀▀███▀░░░░░░▄▀█▀░░░▐▄▄▄▌
▐░▌▀▄░░░░░░░░░░▄▄▄▀░░░▌▀░▌
░▌▐░░▌░░░░░░░░░░░▀░░░░▐░▐
░▐░▀▄▐░░░░░░░░░░░▌▌░▄▄░▐░▌
░░▀█░▄▀░░░░░░░░░▐░▐▄▄▄▄▀▐
░░░▌▀░▐░░░░░░░░▄▀░░▀▀▀▀░▌
░░░▐░░░░░░░░░▌░░░▄▀▀▀▀▄▐
░░░▌░░░░░░░░░▐░░░░░▄▄░░▌
░░█▀▄░░░▐░▐░░░░░░░░░░░█
░█░█░▀▀▄░▌░█░░░▀▀▄▄▄▄▀
█░░░▀▄░░▀▀▄▄█░░░░░▄▀
░░░░░░▀▄░░░░▀▀▄▄▄▀▐
█░░░░░░░▀▄░░░░░▐░▌▐
░█░░░░░░░░▀▄░░░▌░▐▌▐
░░█░░░░░░░░░█░▐░▄▄▌░█▀▄
░░░█░░░░░░░░░█▌▐░▄▐░░▀▄▀▀▄▄
░░░░█░░░░░░░░░▀▄░░▐░░░▀▄░░░▀▀▄▄
░░░░░▀▄░▄▀█░░░░░█░░▌░░░░▀▄░░░░░█
'''

def date_convert(s):
    """Convert a datetime string from yr.no to datetime object."""
    return datetime.strptime(s, "%Y-%m-%dT%H:%M:%S")

def is_daytime(date, sunrise, sunset):
    """Determine if the time part of a date is within some daytime."""
    return sunrise.time() <= date.time() <= sunset.time()

def is_noon(date):
    """"Determine if a given datetime represents a time at noon."""
    return date.hour == 0 and date.minute == 0 and date.second == 0

def is_midnight(date):
    """Determine if a given datetime is exactly midnight."""
    return date.hour == 12

def date_format(date):
    """Format a date with the proper whitespace padding."""
    if is_midnight(date):
        hour = "midnat"
    elif is_noon(date):
        hour = "middag"
    else:
        hour = "kl. " + str(int(date.strftime("%H"))).rjust(2)

    return date.strftime("D. %e. ") + hour

def weather_to_symbol(weather, is_daytime, fancy_unicode):
    # https://en.wikipedia.org/wiki/Miscellaneous_Symbols
    # Tegn for slud og tåge er ikke særligt velunderstøttede endnu.

    if 'rain' in weather:
        return '☔'
    elif 'cloud' in weather:
        return '☁'
    elif 'sun' in weather or 'clear' in weather or 'fair' in weather:
        return '☀' if is_daytime else '☾'
    elif 'sleet' in weather:
        return '🌧+🌨' if fancy_unicode else '☔'
    elif 'fog' in weather:
        return '🌫' if fancy_unicode else '☁'
    elif 'snow' in weather:
        return '☃'
    else:
        return '☘'

def wind_code_to_symbols(code):
    if (len(code) == 1):
        return cardinalDirection(code)
    elif (len(code) == 2):
        return diagonalDirection(code)
    else:
        return cardinalDirection(code[0]) + diagonalDirection(code[1:3])

def cardinalDirection(direction):
    if (direction == "N"):
        return "↓"
    elif (direction == "S"):
        return "↑"
    elif (direction == "E"):
        return "←"
    else:
        return "→"

def diagonalDirection(direction):
    if (direction == "NE"):
        return "↙"
    elif (direction == "SE"):
        return "↖"
    elif (direction == "NW"):
        return "↘"
    else:
        return "↗"

def color_wind_symbol(windspeed, wind_symbol):
    color = 0x00
    if windspeed < 0.3:
        color = "00"
    elif windspeed < 1.5:
        color = "11"
    elif windspeed < 5.5:
        color = "09"
    elif windspeed < 10.7:
        color = "03"
    elif windspeed < 17.1:
        color = "08"
    elif windspeed < 24.4:
        color = "07"
    elif windspeed < 32.6:
        color = "04"
    else:
        color = "05"

    return "\x03{}{}\x03".format(color, wind_symbol)

with ur.urlopen('https://www.yr.no/place/Denmark/Capital/Copenhagen/forecast.xml') as f:
    tree = ET.parse(f)
root = tree.getroot()
forecast = root.find('forecast')
tabular = forecast.find('tabular')
sun = root.find('sun')
sunrise = date_convert(sun.attrib['rise'])
sunrise_time = sunrise.time()
sunset = date_convert(sun.attrib['set'])
sunset_time = sunset.time()

now = datetime.now().time()

print("🌅 {0} 🌇 {1}".format(sunrise_time, sunset_time))

recently_active = eggspi.recentlyActive().decode('utf-8').rstrip().split('\n')
fancy_unicode = 'svip' in recently_active

pad_temp = max(len(time.find('temperature').attrib['value']) for time in tabular)

safe_choices = [s.split('\n')[1:-1] for s in
                [superman, kingkong, someguy, kram]]
edgy_choices = [s.split('\n')[1:-1] for s in
                [hitler]]
is_edgy = eggspi.ircChannel().decode('utf-8').strip() != '#diku'
choices = safe_choices + (edgy_choices if is_edgy else [])
hero = random.choice(choices)
for time, hero_line in zip(tabular, hero):
    date = date_convert(time.attrib['from'])

    wind = time.find('windDirection').attrib['code']
    windspeed = float(time.find('windSpeed').attrib['mps'])

    temperature = time.find('temperature').attrib['value']
    weather_description = time.find('symbol').attrib['name'].lower()

    is_approx_daytime = is_daytime(date, sunrise, sunset)

    weather_symbol = weather_to_symbol(weather_description, is_approx_daytime, fancy_unicode)
    wind_symbol = wind_code_to_symbols(wind.upper())
    wrapped_wind_symbol = color_wind_symbol(windspeed, wind_symbol)
    wind_format_string = "{:4.0f} m/s" if (os.getenv('EGGS_USER') == "sword_smith") else "{:4.1f} m/s"
    wind_speed = wind_format_string.format(windspeed)

    front = '{}:  {}° {}'.format(
        date_format(date),
        temperature.rjust(pad_temp),
        wrapped_wind_symbol.rjust(6)).ljust(23)
    middle = "{}".format(wind_speed).rjust(9)
    back = "{}  {}".format(weather_symbol, hero_line)

    print("{}{} {}".format(front, middle, back))
