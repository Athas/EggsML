#!/usr/bin/env python3

import random
import urllib.request as ur
import xml.etree.ElementTree as ET
from datetime import datetime
import eggsthon.shell as eggspi

superman = r'''
          .=.,
         ;c =\
       __|  _/
     .'-'-._/-'-._
    /..   ____    \
   /' _  [<_->] )  \
  (  / \--\_>/-/'._ )
   \-;_/\__;__/ _/ _/
    '._}|==o==\{_\/
     /  /-._.--\  \_
    // /   /|   \ \ \
   / | |   | \;  |  \ \
  / /  | :/   \: \   \_\
 /  |  /.'|   /: |    \ \
 |  |  |--| . |--|     \_\
 / _/   \ | : | /___--._) \
|_(---'-| >-'-| |       '-'
       /_/     \_\
'''.split('\n')[1:-1]

hitler = r'''
░░░░░░░░░░░▄▄▄▄▄
░░░░░░░▄▄█████████▄▄
░░░░▄▀▀▀▀█▀▀▀▀▀▀█████▄
░░▄██████░░░░░░░░░░░▀██
░▐██████▌░░░░░░░░░░░░░▐▌
░███████▌░░░░░░░░░░░░░░█
▐████████░░░░░░░░░░░░░░░█
▐██████▌░░░░░▄▀▀▀▀▀▄░▀░▄▄▌
░█▀▀███▀░░░░░░▄▀█▀░░░▐▄▄▄▌
▐░▌▀▄░░░░░░░░░░▄▄▄▀░░░▌▀░▌
░▌▐░░▌░░░░░░░░░░░▀░░░░▐░▐
░▐░▀▄▐░░░░░░░░░░░▌▌░▄▄░▐░▌
░░▀█░▄▀░░░░░░░░░▐░▐▄▄▄▄▀▐
░░░▌▀░▐░░░░░░░░▄▀░░▀▀▀▀░▌
░░░▐░░░░░░░░░▌░░░▄▀▀▀▀▄▐
░░░▌░░░░░░░░░▐░░░░░▄▄░░▌
░░█▀▄░░░▐░▐░░░░░░░░░░░█
░█░█░▀▀▄░▌░█░░░▀▀▄▄▄▄▀
█░░░▀▄░░▀▀▄▄█░░░░░▄▀
░░░░░░▀▄░░░░▀▀▄▄▄▀▐
█░░░░░░░▀▄░░░░░▐░▌▐
░█░░░░░░░░▀▄░░░▌░▐▌▐
░░█░░░░░░░░░█░▐░▄▄▌░█▀▄
░░░█░░░░░░░░░█▌▐░▄▐░░▀▄▀▀▄▄
░░░░█░░░░░░░░░▀▄░░▐░░░▀▄░░░▀▀▄▄
░░░░░▀▄░▄▀█░░░░░█░░▌░░░░▀▄░░░░░█
'''.split('\n')[1:-1]

def date_convert(s):
    """Convert a datetime string from yr.no to datetime object."""
    return datetime.strptime(s, "%Y-%m-%dT%H:%M:%S")

def is_daytime(date, sunrise, sunset):
    """Determine if the time part of a date is within some daytime."""
    return sunrise.time() <= date.time() <= sunset.time()

def is_midnight(date):
    """Determine if a given datetime is exactly midnight."""
    return date.hour == 0 and date.minute == 0 and date.second == 0

def date_format(date):
    """Format a date with the proper whitespace padding."""
    if is_midnight(date):
        hour = "midnat"
    else:
        hour = "kl. " + str(int(date.strftime("%H"))).rjust(2)

    return date.strftime("D. %e. ") + hour

def weather_to_symbol(weather, is_daytime, fancy_unicode):
    # https://en.wikipedia.org/wiki/Miscellaneous_Symbols
    # Tegn for slud og tåge er ikke særligt velunderstøttede endnu.

    if 'rain' in weather:
        return '☔'
    elif 'cloud' in weather:
        return '☁'
    elif 'sun' in weather or 'clear' in weather or 'fair' in weather:
        return '☀' if is_daytime else '☾'
    elif 'sleet' in weather:
        return '🌧+🌨' if fancy_unicode else '☔'
    elif 'fog' in weather:
        return '🌫' if fancy_unicode else '☁'
    elif 'snow' in weather:
        return '☃'
    else:
        return '☘'

with ur.urlopen('https://www.yr.no/place/Denmark/Capital/Copenhagen/forecast.xml') as f:
    tree = ET.parse(f)
root = tree.getroot()
forecast = root.find('forecast')
tabular = forecast.find('tabular')
sun = root.find('sun')

recently_active = eggspi.recentlyActive().decode('utf-8').rstrip().split('\n')
fancy_unicode = 'svip' in recently_active

pad_temp = max(len(time.find('temperature').attrib['value']) for time in tabular)

safe_choices = [superman]
edgy_choices = [hitler]
is_edgy = not eggspi.onDIKUChannel()
choices = safe_choices + (edgy_choices if is_edgy else [])
hero = random.choice(choices)
for time, hero_line in zip(tabular, hero):
    date = date_convert(time.attrib['from'])
    temperature = time.find('temperature').attrib['value']
    weather_description = time.find('symbol').attrib['name'].lower()

    sunrise = date_convert(sun.attrib['rise'])
    sunset = date_convert(sun.attrib['set'])
    is_approx_daytime = is_daytime(date, sunrise, sunset)

    weather_symbol = weather_to_symbol(weather_description, is_approx_daytime, fancy_unicode)

    print('{}:  {}° {} {}'.format(
        date_format(date),
        temperature.rjust(pad_temp),
        weather_symbol,
        hero_line))
