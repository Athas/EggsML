#!/usr/bin/env python3

import requests
import re

url = 'https://www.predictit.org/api/marketdata/all'

resp = requests.get(url=url)
data = resp.json()

markets = data['markets']

# Senate odds
senate = list(filter(lambda x: x['id'] == 2703, markets))[0]
senateContracts = senate['contracts']
republicanControlPrice = list(filter(lambda x: x['id'] == 4332, senateContracts))[0]['lastTradePrice']
republicanControlPricePrev = list(filter(lambda x: x['id'] == 4332, senateContracts))[0]['lastClosePrice']
democraticControlPrice = list(filter(lambda x: x['id'] == 4333, senateContracts))[0]['lastTradePrice']
democraticControlPricePrev = list(filter(lambda x: x['id'] == 4333, senateContracts))[0]['lastClosePrice']

sumPriceS = republicanControlPrice + democraticControlPrice
sumPriceSPrev = republicanControlPricePrev + democraticControlPricePrev
republicanChanceS = republicanControlPrice / sumPriceS
republicanChanceSPrev = republicanControlPricePrev / sumPriceSPrev
republicanChanceSDiff = republicanChanceS - republicanChanceSPrev
democraticChanceS = democraticControlPrice / sumPriceS
democraticChanceSPrev = democraticControlPricePrev / sumPriceSPrev
democraticChanceSDiff = democraticChanceS - democraticChanceSPrev

# Odds derived from Senate seats market
# But we can't combine odds yet since we do not have the
# volume information (we want to combine using the volume as weighting)
# These prices are included since they have the largest volume
# at the time of this commit.
senateSeatContracts = list(filter(lambda x: x['id'] == 2891, markets))[0]['contracts']

# 50 seats for the Republicans will give them control of the Senate
# since VP Pence is the tie breaker
pWin = re.compile("^(5|6)")
pLose = re.compile("^(4)")
winPrice = 0.0
winPricePrev = 0.0
losePrice = 0.0
losePricePrev = 0.0
for c in senateSeatContracts:
    if (pWin.match(c['shortName'])):
        winPrice += c['lastTradePrice']
        winPricePrev += c['lastClosePrice']
    if (pLose.match(c['shortName'])):
        losePrice += c['lastTradePrice']
        losePricePrev += c['lastClosePrice']

totalPriceS = winPrice + losePrice
totalPriceSPrev = winPricePrev + losePricePrev
odds = winPrice / totalPriceS
diff = winPrice / totalPriceS - winPricePrev / totalPriceSPrev

#print("{:4.1f}".format(odds * 100))
#print("{:4.1f}".format(diff * 100))

# House odds
house = list(filter(lambda x: x['id'] == 2704, markets))[0]
houseContracts = house['contracts']
republicanControlPrice = list(filter(lambda x: x['id'] == 4330, houseContracts))[0]['lastTradePrice']
republicanControlPricePrev = list(filter(lambda x: x['id'] == 4330, houseContracts))[0]['lastClosePrice']
democraticControlPrice = list(filter(lambda x: x['id'] == 4331, houseContracts))[0]['lastTradePrice']
democraticControlPricePrev = list(filter(lambda x: x['id'] == 4331, houseContracts))[0]['lastClosePrice']

sumPriceH = republicanControlPrice + democraticControlPrice
sumPriceHPrev = republicanControlPricePrev + democraticControlPricePrev
republicanChanceH = republicanControlPrice / sumPriceH
republicanChanceHPrev = republicanControlPricePrev / sumPriceHPrev
republicanChanceHDiff = republicanChanceH - republicanChanceHPrev
democraticChanceH = democraticControlPrice / sumPriceH
democraticChanceHPrev = democraticControlPricePrev / sumPriceHPrev
democraticChanceHDiff = democraticChanceH - democraticChanceHPrev

print("Senatet: Sandsynlighed for republikansk kontrol: {:4.1f} ({:4.1f}); demokratisk: {:4.1f} ({:4.1f})".format((republicanChanceS * 100), republicanChanceSDiff * 100 , democraticChanceS * 100, democraticChanceSDiff * 100 ))
print("Repr√¶sentanternes Hus: Sandsynlighed for republikansk kontrol: {:4.1f} ({:4.1f}); demokratisk: {:4.1f} ({:4.1f})".format((republicanChanceH * 100), republicanChanceHDiff * 100 , democraticChanceH * 100, democraticChanceHDiff * 100 ))




