#!/usr/bin/env perl
use 5.012;
use warnings;
use utf8::all;

# Categories

sub randpick {
    return $_[rand(@_)];
}

# These patterns will only be replaced when words stand completely by themselves.
# This can be useful in cases where the pattern occurs frequently inside other words.
# Examples: Very short words.
my @bounded_categories = (
    # Ordinary
    [qw(op ned)],
    [qw(var er)],
    [qw(blev bliver)],
    [qw(false true)],
    [qw(sandt falsk)],
    [qw(højre venstre)],
    [qw(forkert rigtigt)],
    [qw(første anden tredje fjerde femte sjette syvende ottende niende tiende)],
    [qw(tre fire fem seks syv otte elleve tolv tretten fjorten femten seksten sytten atten nitten)],

    # Weather
    [qw(nord syd øst vest)],
    [qw(svag let moderat kraftig)],
    [qw(regn sol overskyet dis syreregn hagl sne isslag)],
    [qw(vind orkan tyfon brise kuling storm stormflod cyklon tornado)],
);

# These patterns will be replaced regardless of word boundaries. This can be
# useful either if the pattern is unique enough to not cause false positives,
# the pattern is general enough to warrant replacement inside other word
# formations, or the notion of word boundaries isn't meaningful.
my @unbounded_categories = (
    [('i dag', 'i morgen', 'i overmorgen', 'i går', 'i forgårs')],
    [qw(tyve tredive fyrre tres fjers firs fems)],
    [qw(↓ ↑ ← → ↙ ↖ ↘ ↗)],
    [qw(☁ ☀ ☾ ☔ ☁ ☃)],
    [qw(.com .net .org .dk .co.uk .biz .aero .nu .xxx)],

    # Names
    [qw(DIKU ITU SDU DTU AAU AU)],
    [qw(Danmark Sverige Finland Færøerne Island Grønland)],
    [qw(England Irland Skotland Storbritannien Commonwealth)],
    [qw(Randers Holstebro Herning Hobro Aalborg Viborg Skagen Horsens København
        Roskilde Køge Farum Helsingør Dragør Ringsted Næstved Holdbøk Sorø Hellerup)],

    [qw(Søren Jørgen George)],
    [qw(Troels Truls Athas trulsa)],
    [qw(Hillary Donald Bill George Barack Ronald Richard)],
    [qw(Trump Bush Clinton Reagan Obama Nixon)],
    [('Kongeriget', 'Republikken', 'Forbundsrepublikken',
      'Den Demokratiske Folkerepublik', 'Folkerepublikken',
      'Den Føderative Republik', 'Den Bolivarianske Republik',
      'Sultanatet', 'Den Islamiske Republik',
      'Det hasjimitiske kongerige', 'Den Arabiske Republik')],
);

# Numbers

sub max {
    my $x = shift;
    my $y = shift;
    return $x > $y ? $x : $y;
}

my $hour_of_day = @{ localtime() }[2];
my $epsilon = $hour_of_day + 1;

sub cirka {
    my $number = shift;

    # random variation
    my $rand = int(rand() * 2 * $epsilon * 100) / 100;
    my $delta = ($number - int($number) ? $rand : int($rand));
    my $result = $number - $epsilon + $delta;

    # zero-padding
    if ($number =~ /^0/) {
        my $padding = length $number; $padding++ if $result < 0;
        $result = sprintf "%0${padding}d", $result;
    }

    return $result;
}

while (my $line = <>) {
    $line =~ s/(\d+(?:\.\d+)?)/cirka($1)/eg;

    foreach my $values (@bounded_categories) {
        my $pattern = join '|', map(quotemeta, @$values);
        $line =~ s/\b(?:$pattern)\b/randpick(@$values)/egi;
    }

    foreach my $values (@unbounded_categories) {
        my $pattern = join '|', map(quotemeta, @$values);
        $line =~ s/(?:$pattern)/randpick(@$values)/egi;
    }

    print $line;
}
