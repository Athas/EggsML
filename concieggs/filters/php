#!/usr/bin/env perl
use 5.026;
use strict;
use warnings;
use utf8::all;

use Digest::MD5 qw(md5_hex);
use EggsML::EggsPI list => ['cat'];

our $db = $ENV{CONCIEGGS_DB_DIR};

sub pick { $_[rand(@_)] }

sub udsagnsord {
    state $udsagnsord = [ cat($db . '/php/udsagnsord') ];
    return pick(@$udsagnsord);
}

sub funktion {
    state $funktioner = [ cat($db . '/php/funktioner') ];
    return pick(@$funktioner);
}

sub sti {
    state $stier = [ cat($db . '/php/stier') ];
    return pick(@$stier);
}

sub klasse {
    state $klasser = [ cat($db . '/php/klasser') ];
    return pick(@$klasser);
}

sub klasser { klasse . klasse . klasse }

sub kontekst { klasse . '_' . klasse }

sub konstant { uc udsagnsord . '_' . uc klasse }

sub heltal { int(rand 10) }

sub variabel { lc funktion . '_' . lc klasse . '_' . heltal }

sub metode { udsagnsord . klasse . klasse }

sub ejerskab { pick(qw(public private protected)) }

sub alvorlighed { pick('Fatal error', 'Parse error', 'Warning', 'Notice') }

sub fejl {
    state $fejlskabeloner = [ cat($db . '/php/fejl') ];
    my $fejl = pick(@$fejlskabeloner);

    $fejl =~ s/%C/klasser/eg;
    $fejl =~ s/%F/funktion/eg;
    $fejl =~ s/%M/metode/eg;
    $fejl =~ s/%O/kontekst/eg;
    $fejl =~ s/%K/konstant/eg;
    $fejl =~ s/%V/variabel/eg;
    $fejl =~ s/%A/ejerskab/eg;
    $fejl =~ s/%P/sti/eg;
    $fejl =~ s/%d/heltal/eg;
    $fejl =~ s/%H/md5_hex(rand)/eg;
    $fejl = alvorlighed . ': ' . $fejl;

    return $fejl;
}

# Tilf√¶ldig PHP-fejl
say fejl() if rand() < 0.1;

while (my $line = <>) {
    # Magic quotes
    $line =~ s/(?=['"\\])/\\/g;
    say $line;
}
