#!/usr/bin/env python3

import random
import urllib.parse
import urllib.request as ur
import xml.etree.ElementTree as ET
from lxml.html import fromstring
from datetime import datetime
import eggsthon.shell as eggspi
import os
import subprocess
import sys

superman = r'''
          .=.,
         ;c =\
       __|  _/
     .'-'-._/-'-._
    /..   ____    \
   /' _  [<_->] )  \
  (  / \--\_>/-/'._ )
   \-;_/\__;__/ _/ _/
    '._}|==o==\{_\/
     /  /-._.--\  \_
    // /   /|   \ \ \
   / | |   | \;  |  \ \
  / /  | :/   \: \   \_\
 /  |  /.'|   /: |    \ \
 |  |  |--| . |--|     \_\
 / _/   \ | : | /___--._) \
|_(---'-| >-'-| |       '-'
       /_/     \_\
'''

kram = r'''
      ,;;;;;,
     ;;;;;;;;;
    ;;;;'''''';
    ;;C  /))))\\
  /'`;| (((((((|
 (  (_|( |))))))
,(   \  \(((((((|
( \   `._)))))))),_
|  \    \`\`""""' |)
)\  `\   ) \_____/_|
| \   `\    _.,-'  |
|  \    \.,-'   _./ |
|   \      _.-''  |  ;
 \___\__.-'       ;  )
  |----|   _.--,;'   ;
 ,'  , | (     __.,-'
 | ,' ,'  `""''   `.
 |    ;            )
 `,   (            )
  |   (           ,'
  |   |           (
  |   |           |
  |   |           |
  |   |___________|
  |   |      |    |
'''

kingkong = r'''
    /\  ____
    <> ( oo )
    <>_| ^^ |_
    <>   @    \
   /~~\ . . _ |
  /~~~~\    | |
 /~~~~~~\/ _| |
 |[][][]/ / [m]
 |[][][[m]
 |[][][]|
 |[][][]|
 |[][][]|
 |[|--|]|
 |[|  |]|
 ========
==========
|[[    ]]|
==========
'''

someguy = r'''
  \\\\\\,
 _/''  \\\
 \      D
  \_   /
  <\  />,_
 / \Y/ /` \
 || #  |  |
 || #  |  |
 || #  |  |
 ||=[]=|  |
 ||    |__|
//| |  /||\
  | |   |
  | |   |
  ( (   |
  | |   |
  [_[___]
 (_(____|
'''

someotherguy = r'''
 /  イ                 (((ヽ
 (  ノ     __🎩_____     Y  \
 | ( \   (  👁️ 👃👁️)  |   )
 ヽ ヽ `    (  👄)   _ノ   /
     ＼   |   ⌒Ｙ⌒   /    /
         | ヽ   |   ﾉ ／
          ＼トー仝ーイ
            |ミ土彡/
            )\  ° /
           (  \  / )
          (    ѼΞΞΞΞΞΞΞΞΞΞD💦
         / /  /  \ \ \
       ( (  ).     ) ).)
       (   ).      ( | |
       |  /         \  |
      (  ↄↄつ       (  つↄↄ
'''

hitler = r'''
░░░░░░░░░░░▄▄▄▄▄
░░░░░░░▄▄█████████▄▄
░░░░▄▀▀▀▀█▀▀▀▀▀▀█████▄
░░▄██████░░░░░░░░░░░▀██
░▐██████▌░░░░░░░░░░░░░▐▌
░███████▌░░░░░░░░░░░░░░█
▐████████░░░░░░░░░░░░░░░█
▐██████▌░░░░░▄▀▀▀▀▀▄░▀░▄▄▌
░█▀▀███▀░░░░░░▄▀█▀░░░▐▄▄▄▌
▐░▌▀▄░░░░░░░░░░▄▄▄▀░░░▌▀░▌
░▌▐░░▌░░░░░░░░░░░▀░░░░▐░▐
░▐░▀▄▐░░░░░░░░░░░▌▌░▄▄░▐░▌
░░▀█░▄▀░░░░░░░░░▐░▐▄▄▄▄▀▐
░░░▌▀░▐░░░░░░░░▄▀░░▀▀▀▀░▌
░░░▐░░░░░░░░░▌░░░▄▀▀▀▀▄▐
░░░▌░░░░░░░░░▐░░░░░▄▄░░▌
░░█▀▄░░░▐░▐░░░░░░░░░░░█
░█░█░▀▀▄░▌░█░░░▀▀▄▄▄▄▀
█░░░▀▄░░▀▀▄▄█░░░░░▄▀
░░░░░░▀▄░░░░▀▀▄▄▄▀▐
█░░░░░░░▀▄░░░░░▐░▌▐
░█░░░░░░░░▀▄░░░▌░▐▌▐
░░█░░░░░░░░░█░▐░▄▄▌░█▀▄
░░░█░░░░░░░░░█▌▐░▄▐░░▀▄▀▀▄▄
░░░░█░░░░░░░░░▀▄░░▐░░░▀▄░░░▀▀▄▄
░░░░░▀▄░▄▀█░░░░░█░░▌░░░░▀▄░░░░░█
'''

suisse = r'''
|##########     /\
|####  ####    /**\
|###    ###   /****\   /\
|####  ####  /      \ /**\
|########## /  /\    /    \
|          /  /  \  /      \
|         /  /    \/ /\     \
|        /  /      \/  \/\   \
|_______/__/_______/___/__\___\
'''

print_precipitation_uncertainty = False

def get_url_from_search_string(ls):
    """Given a search string, return the URL for the data for the matching place"""
    s = " ".join(ls)
    # special handling of Nordpolen because for some reason yr.no considers it a country
    if s in ["Nordpolen", "nordpolen"]:
        return "https://www.yr.no/place/Nordpolen/Annet/Nordpolen/forecast.xml"
    # It might very well be a better idea to use regexes here
    # This CSS selector is probably super flaky or short-lived
    try:
        search_url = 'https://www.yr.no/soek/soek.aspx?sted={}'.format(urllib.parse.quote_plus(s))
        with ur.urlopen(search_url) as f:
            # If a redirect was not followed, read URL from HTML
            if f.geturl() == search_url:
                body = f.read()
                document = fromstring(body.decode("utf-8"))
                table = 1
                row = 1 # which row represents a good hit? (1-indexed)
                while(True):
                    els = document.cssselect('table.yr-table-search-results tr:nth-of-type({}) td:nth-of-type(4)'.format(row))
                    bad = True
                    table = 1
                    for el in els:
                        bad = el.text in ["Kommune", "Land", "Delstat", "Region", "Fylke"]
                        if not bad:
                            break
                        table += 1
                    if not bad:
                        break
                    row += 1
                place_desc = document.cssselect('table.yr-table-search-results:nth-of-type({}) tr:nth-of-type({}) > td:nth-of-type(2) > a'.format(table, row))[0].get('href')
                place_names = place_desc.split('/')

            # A redirect was followed. Get the API URL from the redirect URL
            else:
                place_names = f.geturl().split('/')

            if "sted" in place_names:
                start_index = place_names.index("sted")
            else:
                start_index = place_names.index("place")

            place_names = place_names[start_index + 1:]

            place_desc = "/".join(map(lambda x: urllib.parse.quote_plus(x), place_names))
            return "https://www.yr.no/place/" + place_desc + "/forecast.xml"
    except Exception as ex:
        if hasattr(ex, 'message'):
            sys.exit(ex.message)
        return

def date_convert(s):
    """Convert a datetime string from yr.no to datetime object."""
    return datetime.strptime(s, "%Y-%m-%dT%H:%M:%S")

def is_daytime(date, sunrise, sunset):
    """Determine if the time part of a date is within some daytime."""
    return sunrise.time() <= date.time() <= sunset.time()

def is_noon(date):
    """"Determine if a given datetime represents a time at noon."""
    return date.hour == 12

def is_midnight(date):
    """Determine if a given datetime is exactly midnight."""
    return date.hour == 0

prior_date = ""
def date_format(date):
    """Format a date with the proper whitespace padding."""
    global prior_date # tell Python to reuse global var in this function instead of making a new var with local scope
    if is_midnight(date):
        hour = "midnat"
    elif is_noon(date):
        hour = "middag"
    else:
        hour = "kl. " + str(int(date.strftime("%H"))).rjust(2)

    date = date.strftime("%e")
    if (date == prior_date):
        return "      " + hour
    else:
        prior_date = date
        return "D. " + date + " " + hour

def weather_to_symbol(weather, is_daytime, fancy_unicode):
    # https://en.wikipedia.org/wiki/Miscellaneous_Symbols
    # Tegn for slud og tåge er ikke særligt velunderstøttede endnu.

    if 'rain' in weather:
        return '☔'
    elif 'cloud' in weather:
        return '☁'
    elif 'sun' in weather or 'clear' in weather or 'fair' in weather:
        return '☀' if is_daytime else '☾'
    elif 'sleet' in weather:
        return '🌧+🌨' if fancy_unicode else '☔'
    elif 'fog' in weather:
        return '🌫' if fancy_unicode else '☁'
    elif 'snow' in weather:
        return '☃'
    else:
        return '☘'

def wind_code_to_symbols(code):
    if (len(code) == 1):
        return cardinalDirection(code)
    elif (len(code) == 2):
        return diagonalDirection(code)
    else:
        return cardinalDirection(code[0]) + diagonalDirection(code[1:3])

def cardinalDirection(direction):
    if (direction == "N"):
        return "↓"
    elif (direction == "S"):
        return "↑"
    elif (direction == "E"):
        return "←"
    else:
        return "→"

def diagonalDirection(direction):
    if (direction == "NE"):
        return "↙"
    elif (direction == "SE"):
        return "↖"
    elif (direction == "NW"):
        return "↘"
    else:
        return "↗"

def color_wind_symbol(windspeed, wind_symbol):
    color = 0x00
    if windspeed < 0.3:
        color = "00"
    elif windspeed < 1.5:
        color = "11"
    elif windspeed < 5.5:
        color = "09"
    elif windspeed < 10.7:
        color = "03"
    elif windspeed < 17.1:
        color = "08"
    elif windspeed < 24.4:
        color = "07"
    elif windspeed < 32.6:
        color = "04"
    else:
        color = "05"

    return "\x03{}{}\x03".format(color, wind_symbol)

cph_url = 'https://www.yr.no/place/Denmark/Capital/Copenhagen/forecast.xml'
url = cph_url
hero = ''
if len(sys.argv) > 1:
    url = get_url_from_search_string(sys.argv[1:])
    if not url:
        print("Jeg kender ikke stedet {}.".format(" ".join(sys.argv[1:])))
        exit(0)
else:
    if (os.getenv('EGGS_USER') == "sword_smith" or os.getenv('EGGS_USER') == "trobjo" or os.getenv('EGGS_USER') == "ElonFusk"):
        url = 'https://www.yr.no/place/Switzerland/Zug/Zug/forecast.xml'
        hero = suisse.split('\n')[1:-1]

with ur.urlopen(url) as f:
    tree = ET.parse(f)
root = tree.getroot()
forecast = root.find('forecast')
tabular = forecast.find('tabular')
sun = root.find('sun')

# Handle polar nights/midnight sun
if 'never_rise' in sun.attrib and sun.attrib['never_rise']:
    sunrise_time = "Polarnat"
    sunset_time = ""
    polar_night = True
    midnight_sun = False
elif 'never_set' in sun.attrib and sun.attrib['never_set']:
    sunrise_time = "Midnatssol"
    sunset_time = ""
    polar_night = False
    midnight_sun = True
else:
    sunrise = date_convert(sun.attrib['rise'])
    sunrise_time = sunrise.time()
    sunset = date_convert(sun.attrib['set'])
    sunset_time = sunset.time()
    polar_night = False
    midnight_sun = False

now = datetime.now().time()

loc = root.find('location')
try:
    _loc = loc.find('location')
    lat = _loc.attrib['latitude']
    lon = _loc.attrib['longitude']
except:
    lat = lon = None

if cph_url != url:
    print("Vejrudsigt for {} i {}".format(loc.find('name').text, loc.find('country').text))
    # TODO: Add distance to Kantine here, see vejrLib.go
print("🌅 {0} 🌇 {1}".format(sunrise_time, sunset_time))

recently_active = eggspi.recentlyActive().decode('utf-8').rstrip().split('\n')
fancy_unicode = 'svip' in recently_active

pad_temp = max(len(time.find('temperature').attrib['value']) for time in tabular)

if lat and lon and random.random() < 0.5:
    _height = len(tabular)
    hero = subprocess.check_output(f'kort {} {} (25x{_height})')
elif not hero:
    safe_choices = [s.split('\n')[1:-1] for s in
                    [superman, kingkong, someguy, kram]]
    edgy_choices = [s.split('\n')[1:-1] for s in
                    [hitler]]
    is_edgy = eggspi.ircChannel().decode('utf-8').strip() != '#diku'
    choices = safe_choices + (edgy_choices if is_edgy else [])
    hero = random.choice(choices)

for time, hero_line in zip(tabular, hero):
    date = date_convert(time.attrib['from'])

    wind = time.find('windDirection').attrib['code']
    windspeed = float(time.find('windSpeed').attrib['mps'])

    # https://youtu.be/WzjWMLv_ZJI
    precipitation = float(time.find('precipitation').attrib['value'])
    precipitation_uncertainty = float(0)
    long_precipitation = False
    if (print_precipitation_uncertainty and 'maxvalue' in time.find('precipitation').attrib and 'minvalue' in time.find('precipitation').attrib):
        precipitation_uncertainty = float(time.find('precipitation').attrib['maxvalue']) - float(time.find('precipitation').attrib['minvalue'])
        long_precipitation = True

    temperature = time.find('temperature').attrib['value']
    weather_description = time.find('symbol').attrib['name'].lower()

    is_approx_daytime = midnight_sun or not polar_night and is_daytime(date, sunrise, sunset)

    weather_symbol = weather_to_symbol(weather_description, is_approx_daytime, fancy_unicode)
    wind_symbol = wind_code_to_symbols(wind.upper())
    wrapped_wind_symbol = color_wind_symbol(windspeed, wind_symbol)
    wind_format_string = "{:4.0f} m/s" if (os.getenv('EGGS_USER') == "sword_smith") else "{:4.1f} m/s"
    wind_speed = wind_format_string.format(windspeed)
    if long_precipitation:
        precipitation_string = "{:3.1f} mm ± {:3.1f}".format(precipitation, precipitation_uncertainty)
    else:
        precipitation_string = "{:3.0f} mm".format(precipitation)

    front = '{}:  {}° {}'.format(
        date_format(date),
        temperature.rjust(pad_temp),
        wrapped_wind_symbol.rjust(6)).ljust(23)
    middle = "{}".format(wind_speed).rjust(10)
    second_breakfast = ""
    if long_precipitation:
        second_breakfast = "{}".format(precipitation_string).rjust(15).ljust(15)
    else:
        second_breakfast = "{}".format(precipitation_string).rjust(7).ljust(7)
    back = "{} {}".format(weather_symbol, hero_line)

    print("{}{}{} {}".format(front, middle, second_breakfast, back))
