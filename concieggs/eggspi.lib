# Shell script function definitions

randomise() {
    sort -R --random-source=/dev/urandom
}

docstring() {
    awk 'BEGIN{indoc=1}\
/^#!/{next}\
/^[^#]/{indoc=0}\
/^# ?$/{next}\
indoc{out = out substr($0, 3, length($0)) " "}\
END{print out}'
}

commasize() {
    awk '{if (out && last) { out = out ", " last; last = $0 }\
else if (out) { last = $0 }\
else { out = $0 } }\
END{ if (last) { if (out) { out = out ", " last } else { out = last } };\
print out }'
}

enumerate() {
    awk '{if (out && last) { out = out ", " last; last = $0 }\
else if (out) { last = $0 }\
else { out = $0 } }\
END{ if (last) { if (out) { out = out " og " last } else { out = last } };\
print out }'
}

aliases() {
    $EGGS_LIB_DIR/eggstool.py $EGGS_DIR/slashdotfrokost aliases "$1"
}

primaryName() {
    aliases "$1" | head -n 1
}

randomName() {
    aliases "$1" | randomise | head -n 1
}

cmpNames() {
    [ $(aliases "$1") = $(aliases "$2") ]
}

dateToTime() {
    now="$(nowTime)"
    if (echo "$1" | grep "^-" > /dev/null); then
        then=$(date -d "$(echo $1|sed s/^-//)" '+%s')
        if [ "$then" ]; then
            if [ "$now" -lt "$then" ]; then
                echo $(expr "$then" '-' 3600 '*' 24)
            else
                echo $then
            fi
        fi
    else
        then=$(date -d "$1" '+%s')
        if [ "$then" ]; then
            if [ "$then" -lt "$now" ]; then
                echo $(expr "$then" '+' 3600 '*' 24)
            else
                echo $then
            fi
        fi
    fi
}

nowTime() {
    date '+%s'
}

dateSecs() {
    date -d "1970-01-01 UTC $1 seconds" "$2"
}

timeToFullDate() {
    dateSecs $1 '+%D klokken %R'
}

timeToDate() {
    thatday=$(dateSecs $1 '+%u')
    today=$(dateSecs $(nowTime) '+%u')
    if [ $1 -le "$(expr $(nowTime) - 3600 '*' 24 '*' 7 )" ]; then
        timeToFullDate $1
    elif [ $1 -ge "$(expr $(nowTime) + 3600 '*' 24 '*' 7 )" ]; then
        timeToFullDate $1
    elif [ "$thatday" = "$today" ]; then
        dateSecs $1 '+i dag klokken %R'
    elif [ "$thatday" = "$(expr $today - 1)" -o "(" "$today" = 1 -a "$thatday" = 7 ")" ]; then
        dateSecs $1 '+i går klokken %R'
    elif [ "$thatday" = "$(expr $today + 1)" -o "(" "$today" = 7 -a "$thatday" = 1 ")" ]; then
        dateSecs $1 '+i morgen klokken %R'
    else
        dateSecs $1 '+på %A klokken %R'
    fi
}

checkNextEggs() {
    time=$(nextEggs | head -n 1)
    if [ ! "$time" ]; then
        return 1
    else
        echo $time
    fi
}

extractDate() {
    while [ $# -ge 1 ]; do
        time=$(dateToTime $1)
        if [ "$time" ]; then
            echo $time
            return 0
        fi
        shift
    done
    checkNextEggs
}

extractUsername() {
    while [ $# -ge 1 ]; do
        name="$(randomName $1)"
        if [ "$name" ]; then
            echo $name
            return 0
        fi
        shift
    done
    randomName $EGGS_USER
}

addToEggs() {
    echo $2 >> $CONCIEGGS_DB_DIR/eggs/$1
    echo $2 $(nowTime) >> $CONCIEGGS_DB_DIR/eggsactly
}

isInEggs() { # Cannot trust return value due to subshell.
    time=$1
    name="$2"
    if [ -s "$CONCIEGGS_DB_DIR/eggs/$time" ]; then
        aliases "$name" | while read alias; do
            if fgrep -x "$alias" $CONCIEGGS_DB_DIR/eggs/$time; then
                return 0
            fi
        done
    fi
    return 1
}

rmFromEggs() {
    time=$1
    export TRAITOR="$2"
    tmpfile=$(mktemp)
    cat $CONCIEGGS_DB_DIR/eggs/$time \
        | awk '$1!=ENVIRON["TRAITOR"]' > $tmpfile
    if [ -s $tmpfile ]; then
        mv $tmpfile $CONCIEGGS_DB_DIR/eggs/$time
    else
        rm $tmpfile $CONCIEGGS_DB_DIR/eggs/$time
    fi
}

nextEggs() {
    export TIME="$(nowTime)"
    ls $CONCIEGGS_DB_DIR/eggs | awk '$1>=ENVIRON["TIME"]'
}

prevEggs() {
    export TIME="$(nowTime)"
    ls $CONCIEGGS_DB_DIR/eggs | awk '$1<ENVIRON["TIME"]'
}

listEggsers() {
    cat $CONCIEGGS_DB_DIR/eggs/$1 | while read who; do
        echo $(randomName "$who")
    done
}

countEggsers() {
    listEggsers $1 | wc -l | sed 's/ *//'
}

describeEggs() {
    listEggsers $1 | randomise | enumerate
}

formatEggs() {
    date=$(dateSecs $1 '+%Y-%m-%d')
    participants=$(listEggsers $1 | commasize)
    echo "$date, $participants"
}

gitRefresh() {
    cd /eggsml
    git pull > /dev/null
}

tryGitChange() {
    msg=$1
    shift
    (git add "$@" && git commit -m "$(randomName $EGGS_USER): $msg" && git push git@github.com:Athas/EggsML.git) > /dev/null
}

gitRepair() {
    (git reset HEAD "$@" && git checkout "$@") > /dev/null
}

parted() {
    name=$1
    aliases "$name" | while read alias; do
        fgrep -w "$alias" $CONCIEGGS_DB_DIR/eggsactly\
        | rev | cut -d ' ' -f 1 | rev | while read time; do
            if [ "$(expr $(nowTime) - $time)" -lt $(expr 5 '*' 60) ]; then
                echo "$alias har begået en Reenberg!"
            fi
        done
    done
}

debtors () {
    $EGGS_LIB_DIR/eggstool.py $EGGS_DIR/slashdotfrokost balances \
        | sort -g | head -n 5 | awk '$1 < 0 { print $0, -1*$1 "kr" }' \
        | cut -d' ' -f 2- | commasize
}

setTopic () {
    echo /t "Følgende misdædere er de største skyldnere til den ærede frokostloge: $(debtors)."
}
