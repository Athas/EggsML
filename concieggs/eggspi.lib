# Shell script function definitions

docstring() {
    awk 'BEGIN{indoc=1}\
/^#!/{next}\
/^[^#]/{indoc=0}\
/^# ?$/{next}\
indoc{out = out substr($0, 3, length($0)) " "}\
END{print out}'
}

export -f docstring

commasize() {
    awk '{if (out && last) { out = out ", " last; last = $0 }\
else if (out) { last = $0 }\
else { out = $0 } }\
END{ if (last) { if (out) { out = out ", " last } else { out = last } };\
print out }'
}

export -f commasize

enumerate() {
    awk '{if (out && last) { out = out ", " last; last = $0 }\
else if (out) { last = $0 }\
else { out = $0 } }\
END{ if (last) { if (out) { out = out " og " last } else { out = last } };\
print out }'
}

export -f enumerate

aliases() {
    $EGGS_LIB_DIR/eggstool.py $EGGS_DIR/slashdotfrokost aliases "$1"
}

export -f aliases

knownUser() {
    aliases > /dev/null
}

export -f knownUser

primaryName() {
    aliases "$1" | head -n 1
}

export -f primaryName

randomName() {
    aliases "$1" | sort -R | head -n 1
}

export -f randomName

dateToTime() {
    now=$(nowTime)
    if (echo "$1" | grep "^-" > /dev/null); then
        then=$(date -d "$(echo $1|sed s/^-//)" '+%s')
        if [ "$then" ]; then
            if [ "$now" -lt "$then" ]; then
                echo $(expr "$then" '-' 3600 '*' 24)
            else
                echo $then
            fi
        fi
    else
        then=$(date -d "$1" '+%s')
        if [ "$then" ]; then
            if [ "$then" -lt "$now" ]; then
                echo $(expr "$then" '+' 3600 '*' 24)
            else
                echo $then
            fi
        fi
    fi
}

export -f dateToTime

nowTime() {
    date '+%s'
}

export -f nowTime

dateSecs() {
    date -d "1970-01-01 UTC $1 seconds" "$2"
}

export -f dateSecs

timeToFullDate() {
    dateSecs $1 '+%D klokken %R'
}

export -f timeToFullDate

timeToDate() {
    thatday=$(dateSecs $1 '+%u')
    today=$(dateSecs $(nowTime) '+%u')
    if [ $1 -lt $(nowTime) ]; then
        timeToFullDate $1
    elif [ $1 -ge $(expr $(nowTime) + 3600 '*' 24 '*' 7 ) ]; then
        timeToFullDate $1
    elif [ $thatday == $today ]; then
        dateSecs $1 '+i dag klokken %R'
    elif [ $thatday == $(expr $today - 1) -o "(" $today == 1 -a $thatday == 7 ")" ]; then
        dateSecs $1 '+i går klokken %R'
    elif [ $thatday == $(expr $today + 1) -o "(" $today == 7 -a $thatday == 1 ")" ]; then
        dateSecs $1 '+i morgen klokken %R'
    else
        dateSecs $1 '+på %A klokken %R'
    fi
}

export -f timeToDate

addToEggs() {
    time=$(dateToTime "$1")
    echo $2 >> $CONCIEGGS_DB_DIR/eggs/$time
}

export -f addToEggs

isInEggs() { # Cannot trust return value due to subshell.
    time=$(dateToTime "$1")
    if [ -s "$CONCIEGGS_DB_DIR/eggs/$time" ]; then
        aliases $2 | while read alias; do
            if fgrep "$alias" $CONCIEGGS_DB_DIR/eggs/$time; then
                return 0
            fi
        done
    fi
    return 1
}

export -f isInEggs

rmFromEggs() {
    time=$(dateToTime "$1")
    export TRAITOR=$2
    tmpfile=$(mktemp)
    cat $CONCIEGGS_DB_DIR/eggs/$time \
        | awk '$1!=ENVIRON["TRAITOR"]' > $tmpfile
    if [ -s $tmpfile ]; then
        mv $tmpfile $CONCIEGGS_DB_DIR/eggs/$time
    else
        rm $tmpfile $CONCIEGGS_DB_DIR/eggs/$time
    fi
}

export -f rmFromEggs

nextEggs() {
    export TIME=$(nowTime)
    ls $CONCIEGGS_DB_DIR/eggs | awk '$1>=ENVIRON["TIME"]'
}

export -f nextEggs

prevEggs() {
    export TIME=$(nowTime)
    ls $CONCIEGGS_DB_DIR/eggs | awk '$1<ENVIRON["TIME"]'
}

export -f prevEggs

listEggsers() {
    cat $CONCIEGGS_DB_DIR/eggs/$1 | while read who; do
        echo $(randomName "$who")
    done
}

export -f listEggsers

describeEggs() {
    listEggsers $1 | enumerate
}

export -f describeEggs

formatEggs() {
    date=$(dateSecs $1 '+%Y-%m-%d')
    participants=$(listEggsers $1 | commasize)
    echo "$date, $participants"
}

export -f formatEggs

gitRefresh() {
    ret=$(GET http://eggsml.dk/update.py | grep "Return value: " | sed 's/Return value: //')
    if [ "$ret" != "0" ]; then
        echo "http://eggsml.dk/update.py meldte fejl!"
        return 1
    else
        return 0
    fi    
}

export -f gitRefresh

tryGitChange() {
    msg=$1
    shift
    (git add "$@" && git commit -m "$EGGS_USER: $1" && git push git@github.com:Athas/EggsML.git) > /dev/null
}

export -f tryGitChange

gitRepair() {
    (git reset HEAD "$@" && git checkout "$@") > /dev/null
}

export -f gitRepair
